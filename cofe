#!/usr/bin/php
<?php
/*
cofelang processor built in PHP It sucks ass - but it's cute and fun so fuck you.
Cofelang is a funny joke language idea by @stitchxd@p2px.me & @dogjaw@hakui.club.

Using Coffee puns to make basic scripts for use on Linux, Windows, and Mac.

*/
if((php_sapi_name() !== 'cli')){
	//If we are not in a terminal, command prompt, ot terminal emulator, kill ourselfs before anything can be exploited on a web server.
	die("cofe can only be used under the CLI - Please use your local terminal emulator or command line utility.");
}

define("VERSION", "0.0.1a");
$processor = $argv[0];
$filename = $argv[1];
$ars = array_slice($argv, 2);
//First we need to parse for optional shit:
if($filename == null || $filename == ""){
	$filename == "help";
}
switch(strtolower($filename)){
	case "help":
		//Print help
		echo "Usage: $processor [file] [arguments]\r\n";
		die();
		break;
	case "version":
		//Print version information
		echo "
        ..
      ..  ..
            ..
             ..
            ..
           ..
         ..
##       ..    ####
##.............##  ##
##.............##   ##
##.............## ##
##.............###
 ##...........##
  #############
  #############
#################
		\r\n";
		echo "Cofelang Version ".VERSION."\r\n";
		echo "*The cofe scripting language for 'home'brewers. ;)\r\n";
		exit(0);
		break;
}

run($filename, $ars);

function run($file, $ars){
	$bean = file_get_contents($file);
	$i = 1;
	if(contains($bean, "\$arg[0]") && $ars == null){
		echo "SPILL: This script requires at least one command line argument. Please try again!\r\n";
		return;
	}
	foreach(preg_split("/((\r?\n)|(\r\n?))/", $bean) as $line){
		//Check to confirm we are cofelang script.
		$parse = strtolower($line);
		if(contains($parse, "#cofelang") && ($i == 1)){
			$i++;
			continue;
		} elseif(!contains($parse, "#cofelang") && ($i == 1)) {
			die("This is not a cofelang script. Please make sure you selected the right file.\r\n");
		}
	    //Start parsing line...
	   	if($line == ""){
	    	//Skip blank lines
	    	$i++;
	    	continue;
	    }
	    
	    if(startsWith($parse, "//")){
	    	//Ignore comments.
	    	$i++;
	    	continue;
	    }
	    $arn = 0;
	    foreach($ars as $arg){
	    	$line = str_replace("\$arg[$arn]", $arg, $line);
	    }
	    switch($parse){
	    	case startsWith($parse, "pour("):
	    		//Process output
	    		$line = str_replace_first("pour(","",$line);
	    		$line = str_replace("\"","",$line);
	    		$line = str_replace_last(")","",$line);
	    		if(contains($line, "$")){
	    			preg_match('/\$(\w+)/', $line, $matches);
	    			if($matches !== null && $matches !== ""){
	    				//Check if we have variable:
	    				$ma = 0;
	    				foreach($matches as $m){
	    					if(startsWith($m, "$")){
	    						$line = str_replace($m, ${$matches[$ma]}, $line);
	    					}
							$ma++;
						}
	    			}
	    		}
	    		pour(ltrim($line));
	    		break;
	    	case startsWith($parse, "emptypot"):
	    		exit(0);
	    		break;
	    	case startsWith($parse, "$");
	    		//This is a variable in script, we need to save it in RAM.
	    		if(contains($parse, " sip(")){
		    		$line = str_replace_first("sip(","",$line);
		    		$line = str_replace("\"","",$line);
		    		$line = str_replace_last(")","",$line);
		    		$var = explode("=", $line);
		    		$var1 = $var[0];
		    		$var2 = ltrim($var[1]);
		    		${trim($var1)} = sip($var2, $var1);
	    		}elseif(contains($parse, "espresso(")){
	    			$line = str_replace_first("espresso(","",$line);
		    		$line = str_replace("\"","",$line);
		    		$line = str_replace_last(")","",$line);
		    		$var = explode("=", $line);
		    		$var1 = $var[0];
		    		$var2 = ltrim($var[1]);
	    			${trim($var1)} = shell_exec("$var2");
	    		} else {
	    			$line = str_replace("\"","",$line);
		    		$var = explode("=", $line);
		    		$var1 = $var[0];
		    		$var2 = ltrim($var[1]);
		    		${trim($var1)} = $var2;
	    		}
	    		break;
	    	case startsWith($parse, "sleep(");
	    		$line = str_replace_last(")","",$line);
	    		$sleep = explode("(", $line);
	    		sleep($sleep[1]);
	    		break;
	    	default:
	    		echo "There was a spill on line $i\r\n";
	    		exit(0);
		}
		$i++;
	}
}
//Actual cofelang functions
function pour($string){
	echo $string."\r\n";
}
function sip($string,$variable){
	//$variable = str_replace("$","", $variable);
	$variable = trim($variable);
	${$variable} = readline($string);
	return ${$variable};
}
//General functions to extend PHP behaviour.
function str_replace_first($from, $to, $subject)
{
    $from = '/'.preg_quote($from, '/').'/';

    return preg_replace($from, $to, $subject, 1);
}
function str_replace_last($search, $replace, $subject)
{
    $pos = strrpos($subject, $search);

    if($pos !== false)
    {
        $subject = substr_replace($subject, $replace, $pos, strlen($search));
    }

    return $subject;
}
function contains($haystack, $needle){
	if (strpos($haystack, $needle) !== false){
		return true;
	}
	return false;
}
function startsWith($haystack, $needle)
{
     $length = strlen($needle);
     return (substr($haystack, 0, $length) === $needle);
}

function endsWith($haystack, $needle)
{
    $length = strlen($needle);
    if ($length == 0) {
        return true;
    }

    return (substr($haystack, -$length) === $needle);
}

?>